class constant_line_handler : thinker
{
bool busy;

pb_in_line_attack linear_actor;

//pointer to effect event, so thiker can use effects actor from it and dont create new
eventhandler effect;

//yes, thinkers can tick
override void tick()
{
	if(linear_actor == null)
	{
		self.busy = false;
		return;
	}
	else
	{
		busy = true;
		pb_draw_line(linear_actor, 'test_state');
	}
}

protected void pb_draw_line(actor liner, statelabel effect_type)
{
	/*
	vector3 begining = pb_in_line_attack(liner).start_pos;
	vector3 ending = liner.pos;

	vector3 diff = level.vec3diff(begining, ending);

	vector3 increment = diff / 10;
	vector3 test_vector = begining;
    double ending_squared =(ending dot ending);

	while((test_vector dot test_vector) <= ending_squared)
	{
		actor tt = pb_effect_event(effect).find_free_effect_actor();
		actor(tt).setorigin(test_vector, false);
		pb_effect_event(effect).approve_state(tt, effect_type);
		test_vector += increment;
	}
	*/
}

/*
void interpolating_line(array<actor> nol = null)
{
	if(nol == null) {console.printf("in line arrays dont exist"); return;}

	for(int i = 0; i < nol.size(); i++ )
	{
		nol[i].setorigin((0, 0, 0), true);
	}
}
*/



}

