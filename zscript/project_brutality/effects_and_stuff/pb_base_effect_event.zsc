//event which controll all effects(smoke/particle/etc)
class pb_effect_event : eventhandler
{
//give pointer to this event to pb actors
//so they can use functions of that event whenever they want
override void worldthingspawned(worldevent e)
{	
	if(e.thing is "pb_weapon_base")
	{pb_weapon_base(e.thing).effects = self;}

	if(e.thing is "pb_monster_base")
	{pb_monster_base(e.thing).effects = self;}

	if(e.thing is "pb_projectile_base")
	{pb_projectile_base(e.thing).effects = self;}
}

//arrays for storing pointers to effect actors
private array<cheap_effect_base> effect_actors;

//spawn prof the beginning some effects
override void worldloaded(worldevent e)
{
	for(uint i = 1; i < 100; i++)
	{
		effect_actors.push( (cheap_effect_base)(actor.spawn("cheap_effect_base", (double.infinity, double.infinity, double.infinity) ) ) );
		cheap_effect_base(effect_actors[i-1]).set_event(self);
	}
}

//find free sprite or particle effect actor
private actor find_free_effect()
{
	int dd = self.effect_actors.size();

	for(uint i = 0; i <= dd; i++)
	{
		if(i == dd)
		{
			actor ss = actor.spawn("cheap_effect_base", pos:(0, 0, 0) );

			cheap_effect_base(ss).set_event(self);
			effect_actors.push((cheap_effect_base)(ss) );
			//since zscript compiler is stupid as fuck, it just bytecod interpreter
			//all previous checks and actor type just too complicated for it
			//so we need to ensure it that pushed actor match with array type
			//to do so use(actor type)(pointer to actor)
			//CAUTION space between )( break it

			return ss; break;
		}

		if(self.effect_actors[i])
		{
			if(cheap_effect_base(self.effect_actors[i]).check_busyness() == false)
			{
				return self.effect_actors[i]; break; 
			}
		}
	}

	return null;
}

//simple function all sense of it check state and say into console if there are no such state
private void approve_state(actor subject = null, statelabel state_name = null)
{
	if(subject == null) {console.printf("there are no actor to change state"); return;}
	if(state_name == null) {console.printf("there are no state to search"); return;}

	let stt_lnk = subject.findstate(state_name);

	if(stt_lnk == null) {console.printf("actor at %d %d %d dont have state", subject.pos.x, subject.pos.y, subject.pos.z ); return;}

	subject.setstate(stt_lnk);
}


//here actually shows some mikle bay explosions
actor show_some_effect(actor caller = null, statelabel effect_state = null, vector3 offset = (0,0,0), vector3 speed = (0, 0, 0), double size = 1 )
{
	//effect must be "attached" to actor
	if(caller == null || effect_state == null) {return null;}
	
	actor lin = find_free_effect();
	if(lin == null)
		return null;

	approve_state(lin, effect_state);
	lin.setorigin(caller.pos + offset, false);
	lin.vel = speed;
	lin.scale = (size, size);
	return lin;
}


//special array type which contains thinkers which handle case of contaniou rays
//like beam bfg
protected array<thinker> continious_ray_handlers;

//find bored thinker to say it "draw some line, cmon"
thinker find_free_line_handler()
{
	int dd = self.continious_ray_handlers.size();

	for(uint i = 0; i <= dd; i++)
	{
		if(i == dd)
		{
			thinker ss = new("constant_line_handler");
			self.continious_ray_handlers.push(ss);
			constant_line_handler(ss).effect = self;
			return ss; break;
		}
		if(self.continious_ray_handlers[i])
		{
			if(constant_line_handler(self.continious_ray_handlers[i]).busy == false)
			{
				return self.continious_ray_handlers[i]; break; 
			}
		}
	}
	return null;
}



}


//base class for reusing effects in effect event
class pb_special_effect_base : actor
{
protected bool show_something;
protected state off_state, reset_cond;
protected eventhandler effect_event;

void set_event(eventhandler en)
{
	if(en is 'pb_effect_event') effect_event = en;
}

override void beginplay()
{
	super.beginplay();
	off_state = findstate("off");
	reset_cond = findstate("reset_self_condition");
}

bool check_busyness()
{
	return show_something;
}


override int SpecialMissileHit (Actor victim)
{
	vel = (0, 0, 0);
	return 1;
}

override void tick()
{
	super.tick();
	if(curstate != off_state || curstate != reset_cond)
	{
		show_something = true;
	}
}


default
{+nointeraction; +noclip; +nogravity; +notonautomap; radius 1; height 1;}

states
{
	spawn:
	off:
		tnt1 a -1;
	stop;

	reset_self_condition:
		tnt1 a 0
		{
			self.scale =(1, 1);
			self.vel = (0, 0, 0);
			setorigin( (double.infinity, double.infinity, double.infinity), false );
			show_something = false;
			alpha = 1;
			for(uint i = 0; i < 10; i++)
				a_stopsound(i);
		}
	goto off;
}

}




//dummy class which serve only to combine all effects under one base

class cheap_effect_base : pb_special_effect_base {}


























class fire_effect : cheap_effect_base {}
class particle_effect : cheap_effect_base {}

class smoke_effect : cheap_effect_base
{
Default
{
	+NOBLOCKMAP;
	+NOTELEPORT;
	+DONTSPLASH;
	+MISSILE;
	+FORCEXYBILLBOARD;
	+CLIENTSIDEONLY;
	Alpha 0.1;
	RenderStyle "Translucent";
	Scale 1;
}

}





















// Optional Motion Blur by Pixel Eater
class MBlurHandler : StaticEventHandler
{
	int			pitch, yaw ;
	double		xtravel, ytravel ;
	
	transient cvar m_blur;
	
	override void PlayerEntered( PlayerEvent e )
	{
		PlayerInfo plr = players[ consoleplayer ];
		m_blur = Cvar.GetCVar( "mblur", plr );
		if( plr )
		{	
			xtravel = 0 ;
			ytravel = 0 ;
		}
	}
	
	override void WorldTick()
	{
		PlayerInfo	plr = players[ consoleplayer ];
		if( plr && plr.health > 0 && m_blur.GetBool() )
		{
			yaw		= plr.mo.GetPlayerInput( ModInput_Yaw );
			pitch	= -plr.mo.GetPlayerInput( ModInput_Pitch );
		}
	}
	
	override void NetworkProcess( ConsoleEvent e )
	{
		PlayerInfo	plr = players[ consoleplayer ];
		if( plr && e.Name == "liveupdate" )
		{
			double pitchdimin	= 1. - abs( plr.mo.pitch * 1. / 90 );
			double decay		= 1. - Cvar.GetCVar( "mblur_recovery", plr ).GetFloat() * .01 ;
			double amount		= Cvar.GetCVar( "mblur_strength", plr ).GetFloat() * 10. / 32767 * sqrt( pitchdimin );
			xtravel				= xtravel * decay + yaw * amount * .625 ;
			ytravel				= ytravel * decay + pitch * amount ;
			
			if( Cvar.GetCVar( "mblur_autostop", plr ).GetBool() )
			{
				double threshold = Cvar.GetCVar( "mblur_threshold", plr ).GetFloat() * 30 ;
				double recovery2 = 1 - Cvar.GetCVar( "mblur_recovery2", plr ).GetFloat() * .01 ;
				if( abs( yaw )		<= threshold ) xtravel *= recovery2 ;
				if( abs( pitch )	<= threshold ) ytravel *= recovery2 ;
			}
		}
	}
	
	override void UiTick()
	{
		PlayerInfo	plr = players[ consoleplayer ];
		if( plr )
		{
			if( plr.health > 0 && Cvar.GetCVar( "mblur", plr ).GetBool() )//&& yaw && pitch )
			{
				EventHandler.SendNetworkEvent( "liveupdate" );
				
				int copies			= 1 + Cvar.GetCVar( "mblur_samples", plr ).GetInt() ;
				double increment	= 1. / copies ;
				vector2 travel		=( xtravel, ytravel ) / screen.getheight() ;
				
				Shader.SetUniform2f( plr, "MBlur", "steps", travel * increment );
				Shader.SetUniform1f( plr, "MBlur", "samples", copies );
				Shader.SetUniform1f( plr, "MBlur", "increment", increment );
				Shader.SetUniform1f( plr, "MBlur", "blendmode", Cvar.GetCVar( "mblur_blendmode", plr ).GetInt() );
					
				Shader.SetEnabled( plr, "MBlur", true );
			}
			else
			{
				Shader.SetEnabled( plr, "MBlur", false );
			}
		}
	}
}