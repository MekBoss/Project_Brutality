class pb_monster_base : actor
{
//link to event which control effects
eventhandler effects;

protected thinker blooder;

override void beginplay()
{
	super.beginplay();

	blooder = new("goreer").goreer(self);
}

//handler for freeze/fatality/dismembering and other death types
//where monster ripped to pieces
protected bool frozen, dismembered, cant_resurrect;
override bool CanResurrect(Actor other, bool passive)
{
	return !cant_resurrect;
}

//head position is height on which "body" of monster should become "head"
//I recomend to set head_starting_position approx. to "monster heght" - "monster height / 10"
//because golden ratio and it dont looks stupid in game
protected double head_mul, head_pos, legs_pos;

Property headshot_multiplier : head_mul;
Property head_starting_position : head_pos;

//for legs, height where legs lost it preciese name and turns into ass
Property legs_height_max : legs_pos;

//references to gore function so it can decide what blood and how much spawn
//blood color obvious, blood size is amount of a blood/gore it must spawn(realistic/japanes cartoon/etc)
//not confuse with cvar
protected string blood_color, blood_size;

//blood color for translation, by default are red, can be or green or blue
Property blood_color : blood_color;
Property blood_size : blood_size;


//handling of ammo and weapon spawning after monster death
protected class<actor> weapon_type;

Property weapon_type : weapon_type;

//true weapon, false ammo
protected bool chose_what_spawn()
{
	if(random(0, 10) > 7) {return true;}
	return false;
}

protected void spawn_reward()
{
	if(random(0, 10) < 6) return;
	if( chose_what_spawn() && weapon_type != null)
	{
		spawn(weapon_type, self.pos + (0, 0, default.height/2) );
	}
	else
	{
		actor amo = spawn(weapon(getdefaultbytype(weapon_type) ).AmmoType1,  + (0, 0, default.height/2) );
		if(random(0, 1) == 1) inventory(amo).amount += random(0, inventory(amo).amount);
	}
}

override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
{
	spawn_reward();
	super.Die(source, inflictor, dmgflags);
}



default
{
	pb_monster_base.headshot_multiplier 1;
	pb_monster_base.head_starting_position -1;//so that if someone forgot to define this number monster dont get headshot from every attack
	pb_monster_base.legs_height_max -1;//same for legs
	monster;
	
	pb_monster_base.blood_color "";//by default it "null", empty string
	pb_monster_base.blood_size "";//same for size

	pb_monster_base.weapon_type '';//weapon type must be defined in 'final' monster definition
}

enum blood_colors
{
	normal = 0,
	blue = 1,
	green = 2
};

//since all green/blue blood sprites ARE translated default blood sprites
//this function handle it wihtout copypaste blood definition three times with new translate field
protected actor pb_spawn_blood(
blood_colors collor = 0, string actor_type = "Unknown", double height = 0, double angle = 0, double pitch = 0)
{
	actor qqqq = a_spawnprojectile(actor_type, height, 0, angle, 2, pitch);
	switch(collor)
	{
		case blue: qqqq.A_SetTranslation("blood_to_Blue"); break;
		case green: qqqq.A_SetTranslation("blood_to_Green"); break;
		default: break;
	}
	return qqqq;
}

//internal gzdoom handler for damaging actors
override int DamageMobj(Actor inflictor, Actor source,int damage,Name mod,int Flags,Double angle)
{	//check if monster actually alive
	if(self.bkilled == false)
	{
		if(!(flags & DMG_EXPLOSION) )
		{//explosion cant inflict headshot...at least in PB
			int new_damage = super.DamageMobj(inflictor, source, damage, mod, flags ,angle);
			//to handle cases when actor vulnerable/invulnerable to some damage type
			//before apply headshot multiplicator
		
			vector3 relat_pos =(0, 0, 0);
			if(inflictor != null){ relat_pos = self.vec3to(inflictor); }
			//find relative position of inflictor
		
			if(pb_monster_base(self).head_pos > -1 && relat_pos.z >= pb_monster_base(self).head_pos)
			{//if head variable valid
				new_damage *= self.head_mul;
				return super.DamageMobj(inflictor, source, new_damage, 'headshot', flags ,angle);
			}

			if(pb_monster_base(self).legs_pos > -1 && relat_pos.z <= pb_monster_base(self).legs_pos)
			{//check for arrow in the knee
				return super.DamageMobj(inflictor, source, new_damage, 'leg', flags ,angle);
			}
			return new_damage;
		}

		if((inflictor is "PB_player_pawn_base" || source is "PB_player_pawn_base") && self.target == null)
		{
			console.printf("here, probably, must be shown some fatality");
			//fatality placeholder
		}
		return super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	}
	else
	{
		int dam = super.DamageMobj(inflictor, source, damage, mod, flags, angle);

		if(health - dam <= 0)
			setstatelabel("xdeath");

		return dam;
	}
}

//handling of freeze death
override double GetDeathHeight()
{
	if(DamageType == 'Ice' || DamageType == 'Freeze' || DamageType == 'Chill')
	{return default.height;}
	return super.GetDeathHeight();
}

//virtual which return state corresponding to damage
virtual protected state pb_get_death_state()
{
	return null;
}

states
{
	Death.Massacre:
	stop;
}


//how much time monster seeek it target before forgeting
protected int memory_timer;
const max_memory = 20;
protected void pb_monster_memory(statelabel idle_state = "idle")
{
	memory_timer++;
	if(memory_timer > max_memory)
	{
		memory_timer = 0;
		a_cleartarget();
		state jump_to = findstate(idle_state);
		if(jump_to == null) jump_to = findstate("see");
		setstate(jump_to);
	}
}

//for gibbing death
protected void simple_death_handler()
{
		health += 200;
		self.bDONTTHRUST = true;
		self.bNOPAIN = true;
		self.bNODROPOFF = false;
		self.bSLIDESONWALLS = true;
		self.bsolid = false;
		self.bshootable = true;
		a_setsize(default.radius, default.height / 10);
}


}




class goreer : thinker
{
private actor target;

private state cur_state;
private string spawnable;
private int period;
private bool act;

goreer goreer(actor type)
{
	target = type;
	changestatnum(127);
	return self;
}

void button()
{
	act = true;
}

override void tick()
{
	if(!target) self.destroy();
	if(act)
	{
		if(cur_state == null) cur_state = target.curstate;
		if(cur_state != target.curstate)
		{
			cur_state = null;
			act = false;
			spawnable = "";
			period = -1;
		}

		if( (target.tics % period) == 0 && target.curstate == cur_state)
		{
			target.spawn(spawnable, target.pos).vel = (frandom(-5, 5),frandom(-5, 5), frandom(-5, 5) );
		}
	}
}

}