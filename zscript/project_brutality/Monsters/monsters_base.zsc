class pb_monster_base : actor
{
//link to event which control effects
eventhandler effects;

protected thinker blooder;

override void beginplay()
{
	super.beginplay();

	blooder = new("goreer").goreer(self);
}



//dummmy functions to shut up compiler "deprecated functions!!!111111111" warnings
//because for now I dont want to create new one
protected void combination_attack()
{
	Class<Actor> MissileType = MissileName;
	like_Attack(true, true, MeleeDamage, MeleeSound, MissileType, MissileHeight);
}

protected void like_Attack (bool domelee, bool domissile, int MeleeDamage, Sound MeleeSound, Class<Actor> MissileType,double MissileHeight)
{
	let targ = target;
	if (targ == NULL) return;

	A_FaceTarget ();
	if (domelee && MeleeDamage>0 && CheckMeleeRange ())
	{
		int damage = random[CustomMelee](1, 8) * MeleeDamage;
		if (MeleeSound) A_PlaySound (MeleeSound, CHAN_WEAPON);
		int newdam = targ.DamageMobj (self, self, damage, 'Melee');
		targ.TraceBleed (newdam > 0 ? newdam : damage, self);
	}
	else if (domissile && MissileType != NULL)
	{
		// This seemingly senseless code is needed for proper aiming.
		double add = MissileHeight + GetBobOffset() - 32;
		AddZ(add);
		Actor missile = SpawnMissileXYZ (Pos + (0, 0, 32), targ, MissileType, false);
		AddZ(-add);

		if (missile)
		{
			// automatic handling of seeker missiles
			if (missile.bSeekerMissile)
			{
				missile.tracer = targ;
			}
			missile.CheckMissileSpawn(radius);
		}
	}
}


//dummies ends here




//handler for freeze/fatality/dismembering and other death types
//where monster ripped to pieces
protected bool frozen, dismembered, cant_resurrect;
override bool CanResurrect(Actor other, bool passive)
{
	return !cant_resurrect;
}

//head position is height on which "body" of monster should become "head"
//I recomend to set head_starting_position approx. to "monster heght" - "monster height / 10"
//because golden ratio and it dont looks stupid in game
protected double head_mul, head_pos, legs_pos;

Property headshot_multiplier : head_mul;
Property head_starting_position : head_pos;

//for legs, height where legs lost it preciese name and turns into ass
Property legs_height_max : legs_pos;

//references to gore function so it can decide what blood and how much spawn
//blood color obvious, blood size is amount of a blood/gore it must spawn(realistic/japanes cartoon/etc)
//not confuse with cvar
protected string blood_color, blood_size;

//blood color for translation, by default are red, can be or green or blue
Property blood_color : blood_color;
Property blood_size : blood_size;


//handling of ammo and weapon spawning after monster death
protected class<actor> weapon_type;

Property weapon_type : weapon_type;

//true weapon, false ammo
protected bool chose_what_spawn()
{
	if(random(0, 10) > 7) {return true;}
	return false;
}

protected void spawn_reward()
{
	if(random(0, 10) < 5) return;
	if(weapon_type != null)
	{
		if( chose_what_spawn() )
		{
			spawn(weapon_type, self.pos + (0, 0, default.height/2) );
		}
		else
		{
			class<Ammo> amo = weapon(getdefaultbytype(weapon_type) ).AmmoType1;
			if(amo == null) return;
			inventory am = (inventory)(spawn(amo,  + (0, 0, default.height/2) ) );
			if(random(0, 1) == 1) inventory(am).amount += random(0, inventory(am).amount);
		}
	}
}

override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
{
	spawn_reward();
	super.Die(source, inflictor, dmgflags);
}



default
{
	pb_monster_base.headshot_multiplier 1;
	pb_monster_base.head_starting_position -1;//so that if someone forgot to define this number monster dont get headshot from every attack
	pb_monster_base.legs_height_max -1;//same for legs
	monster;
	
	pb_monster_base.blood_color "";//by default it "null", empty string
	pb_monster_base.blood_size "";//same for size

	pb_monster_base.weapon_type '';//weapon type must be defined in 'final' monster definition
}

enum blood_colors
{
	normal = 0,
	blue = 1,
	green = 2
};

//since all green/blue blood sprites ARE translated default blood sprites
//this function handle it wihtout copypaste blood definition three times with new translate field
protected actor pb_spawn_blood(
blood_colors collor = 0, string actor_type = "Unknown", vector3 offset = (0, 0, 0), vector3 speed = (0, 0, 0) )
{
	actor qqqq = spawn(actor_type, pos+offset);
	qqqq.vel = speed;
	switch(collor)
	{
		case blue: qqqq.A_SetTranslation("blood_to_Blue"); break;
		case green: qqqq.A_SetTranslation("blood_to_Green"); break;
		default: break;
	}
	return qqqq;
}

//internal gzdoom function for damaging actors
override int DamageMobj(Actor inflictor, Actor source,int damage,Name mod,int Flags,Double angle)
{	//check if monster actually alive
	if(self.bkilled == false)
	{
		if(!(flags & DMG_EXPLOSION) )
		{//explosion cant inflict headshot...at least in PB
			int new_damage = super.DamageMobj(inflictor, source, damage, mod, flags ,angle);
			//to handle cases when actor vulnerable/invulnerable to some damage type
			//before apply headshot multiplicator
		
			vector3 relat_pos =(0, 0, 0);
			if(inflictor != null){ relat_pos = self.vec3to(inflictor); }
			//find relative position of inflictor
		
			if(pb_monster_base(self).head_pos > -1 && relat_pos.z >= pb_monster_base(self).head_pos)
			{//if head variable valid
				new_damage *= self.head_mul;
				return super.DamageMobj(inflictor, source, new_damage, 'headshot', flags ,angle);
			}

			if(pb_monster_base(self).legs_pos > -1 && relat_pos.z <= pb_monster_base(self).legs_pos)
			{//check for arrow in the knee
				return super.DamageMobj(inflictor, source, new_damage, 'leg', flags ,angle);
			}

			if((inflictor is "PB_player_pawn_base" || source is "PB_player_pawn_base") && self.target == null)
			{
				console.printf("here, probably, must be shown some fatality");
				//fatality placeholder
			}

			return new_damage;
		}

		return super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	}
	else
	{
		int dam = super.DamageMobj(inflictor, source, damage, mod, flags, angle);

		if(health - dam <= 0)
			setstatelabel("xdeath");

		return dam;
	}
}

//handling of freeze death
override double GetDeathHeight()
{
	if(DamageType == 'Ice' || DamageType == 'Freeze' || DamageType == 'Chill')
	{return default.height;}
	return super.GetDeathHeight();
}

//virtual which return state corresponding to damage
virtual protected state pb_get_death_state()
{
	return null;
}

//how much time monster seeek it target before forgeting
protected int memory_timer;
const max_memory = 20;
protected void pb_monster_memory(statelabel idle_state = "idle")
{
	memory_timer++;
	if(memory_timer > max_memory)
	{
		memory_timer = 0;
		a_cleartarget();
		state jump_to = findstate(idle_state);
		if(jump_to == null) jump_to = findstate("see");
		setstate(jump_to);
	}
}

//for gibbing death
protected void simple_death_handler()
{
	health += 200;
	self.bDONTTHRUST = true;
	self.bNOPAIN = true;
	self.bNODROPOFF = false;
	self.bSLIDESONWALLS = true;
	self.bsolid = false;
	self.bcorpse = true;
	self.bshootable = true;
	a_setsize(default.radius, default.height / 10);
}

protected double prev_z_vel;

protected bool check_falling()
{
	if(vel.z == 0 && prev_z_vel < 0) return true;
	prev_z_vel = vel.z;
	return false;
}

protected void gibbed_falling()
{
	if(check_falling() ) {}
	else{setstate(curstate);}
}

states
{
	Pain.Stun:
		tnt1 a 0
		{
			state default_pain = findstate("pain");
			//it alive, ALIVE!!!!!!!!!!
			sprite = default_pain.sprite;
			frame = default_pain.frame;
		}
	stun_pain_loop:
		"####" "#" 1 A_Pain();
		"####" "##########" 3 A_SpawnItemEx("StunElectrocute", random(-12, 12), random(-12, 12),  random(16, 52), 0, 0);
		tnt1 a 0 a_jumpif(random(0, 10) < 7, "stun_pain_loop");
		tnt1 a 0 setstate(findstate("see") );



	Death.Shrink:
		"####" "#" 0 A_PlaySound("Shrink", 3);
	shrink_loop:
		"####" "#" 1
		{
			scale -= (0.01, 0.01);
			a_setsize(default.radius * scale.x, default.height * scale.x);
			if(scale.x > 0.2) setstate(curstate);
		}
	stop;

	//kill monsters and mdk cheats damage type
	//so it wont explode computer by spawning >9000 gore actors
	Death.Massacre:
		tnt1 a 1;
	stop;

	Death.GreenFire:
	Death.Plasma: Death.Plasma2:
	Death.SuperPlasma:
		TNT1 A 0;
		TNT1 A 0 A_XScream();
		TNT1 A 0 A_NoBlocking();

		EXPL AAAAAAAAAAAAAAAAAAAAAAAA 0 
		{
			pb_effect_event(effects).show_some_effect(self, "GreenFlameTrails");
		}

		TNT1 A 0 A_StopSound(2);
		TNT1 A 0 A_XScream();
		TNT1 A 0 A_NoBlocking();
		XBRN AABB 2 BRIGHT
		{
			A_SpawnItem("Blue_Flare",0,43);
			a_spawnprojectile("pb_blood", 30, 0, random(0, 360), 2, random(0, 160));
		}
		TNT1 A 0 a_spawnprojectile("XDeathBurnedArm", 32, 0, random(0, 360), 2, random(0, 160));
		TNT1 A 0 a_spawnprojectile("XDeathBurnedLeg", 32, 0, random(0, 360), 2, random(0, 160));
		TNT1 A 0 a_spawnprojectile("XDeathBurnedSkull", 32, 0, random(0, 360), 2, random(0, 160));
		TNT1 A 0 a_spawnprojectile("XDeathBurnedMeat", 32, 0, random(0, 360), 2, random(0, 160));
		TNT1 A 0 a_spawnprojectile("XDeathBurnedMeat", 32, 0, random(0, 360), 2, random(0, 160));
		TNT1 A 0 a_spawnprojectile("XDeathBurnedMeat", 32, 0, random(0, 360), 2, random(0, 160));
		TNT1 AAAAAAAAAAAAAAAAAA 0 a_spawnprojectile("Ashes1", 32, 0, random(0, 360), 2, random(0, 180));
		TNT1 AAAAAAAAAAAAAAAAAA 0 a_spawnprojectile("Ashes2", 32, 0, random(0, 360), 2, random(0, 180));
		
		XBRN CCDDEEFF 2 BRIGHT
		{
			A_SpawnItem("Blue_Flare",0,43);
			a_spawnprojectile("pb_blood", 30, 0, random(0, 360), 2, random(0, 160));
			a_spawnprojectile("PlasmaParticleX", 48, 0, random(0, 360), 2, random(0, 360));
			a_spawnprojectile("PlasmaParticleX", 42, 0, random(0, 360), 2, random(0, 360));
		}
	Stop;
	

	Death.Ice:
	Death.Freeze:
	Death.Frost:
		"####" "#" 0
		{
			self.bSHOOTABLE = false; self.bSOLID = false;
			A_SetTranslation("ice");
			cant_resurrect = true;
		}
		"####" "#" 1 {tics = random(350, 700);}
	
		"####" "#" 5
		{
			if(scale.x > 0.01)
			{
				scale -= (0.01, 0.01);
				//spawn smoke here
				setstate(curstate);
			}
		}
	Stop;

}


}


class goreer : thinker
{
private actor target;

private state cur_state;
private string spawnable;
private int period;
private bool act;

goreer goreer(actor type)
{
	target = type;
	changestatnum(127);
	return self;
}

void button()
{
	act = true;
}

override void tick()
{
	if(!target) self.destroy();
	if(act)
	{
		if(cur_state == null) cur_state = target.curstate;
		if(cur_state != target.curstate)
		{
			cur_state = null;
			act = false;
			spawnable = "";
			period = -1;
		}

		if( (target.tics % period) == 0 && target.curstate == cur_state)
		{
			target.spawn(spawnable, target.pos).vel = (frandom(-5, 5),frandom(-5, 5), frandom(-5, 5) );
		}
	}
}

}