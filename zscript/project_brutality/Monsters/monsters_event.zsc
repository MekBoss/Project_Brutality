/*okay, spawning system need to wait for its hero which rewrite it
	so for now it use default random replace script
	case 666:
			switch(LevelNumber)
			{
				case 1:
				case 5:
					SetActorState(0,"EarlyLevelMob",true);
					break;
				case 2:
				case 6:
					SetActorState(0,"LowLevelMob",true);
					break;
				case 3:
				case 7:
					SetActorState(0,"MidLevelMob",true);
					break;
				case 4:
				case 8:
					SetActorState(0, "HighLevelMob",true);
					break;
				default:
					if(LevelNumber > 8) SetActorState(0, "HighLevelMob",true);
					else SetActorState(0,"LowLevelMob",true);
					Break;
			}
			break;
	case 667:
			Tier1
	case 668:
			Tier2
	case 669:
			Tier3;
	case 670
			Tier4
	case 671:
			switch(LevelNumber)
			{
				case 1:
				case 5:
					SetActorState(0,"DiceTier1",true);
					break;
				case 2:
				case 6:
					SetActorState(0,"DiceTier2",true);
					break;
				case 3:
				case 7:
					SetActorState(0,"DiceTier3",true);
					break;
				case 4:
				case 8:
					SetActorState(0, "DiceTier4",true);
					break;
				default:
					if(LevelNumber > 8) SetActorState(0, "DiceTier4",true);
					else SetActorState(0,"DiceTier2",true);
					Break;
			}
			break;
		case 672:
			DeathWish
		case 663:
			Random
		case 674:
			PistolStart
		case 675:
			ReplaceBrutalOnly*/



class monster_handle_event : eventhandler
{
protected array<class<pb_monster_base> > pb_monsters_replacer;

protected bool pb_is_contain_class(string class_name = "")
{
	if(class_name == "") return false;

	for(int i = 0; i < pb_monsters_replacer.size(); i++)
	{
		if(pb_monsters_replacer[i] is class_name && !(pb_monsters_replacer[i].getclassname() == class_name) )
		{
			//at least one iteration with such class type already add all childs to list
			return true;
			break;
		}
	}
	return false;
}

//return one random names of monsters inherited from base_class
protected string return_random_replacement(string base_class = "")
{
	if(base_class == "") {console.printf("base class for spawning is not defined at all"); return "Unknown";}
	
	array<string> names; names.clear();
	int sz = 0;

	if(pb_monsters_replacer.size() > 0 && pb_is_contain_class(base_class) )
	{
		for(int i = 0; i < pb_monsters_replacer.size(); i++)
		{
			if(pb_monsters_replacer[i] is base_class && !(pb_monsters_replacer[i].getclassname() == base_class) )
			{
				names.push(pb_monsters_replacer[i].getclassname() ); 
			}
		}
	}

	else
	{
		sz = allactorclasses.size();
		for(int i = 0; i < sz; i++)
		{
			if(allactorclasses[i] is base_class && !(allactorclasses[i].getclassname() == base_class) )
			{
				pb_monsters_replacer.push(allactorclasses[i]);
				names.push(allactorclasses[i].getclassname() );
			}
		}
	}
	
	sz = names.size();
	
	if(sz <= 0) {console.printf("actor base %s dont exist", base_class); return "Unknown";}
	if(sz > 1) {return names[random(0, sz - 1)];}
	if(sz == 1) {return names[0];}
	
	return "Unknown";
}

override void CheckReplacement(ReplaceEvent e)
{
	if(e.Replacee is "pb_monster_base") return;

	if(GetDefaultByType(e.Replacee).bismonster != true) return;

	string nam = e.Replacee.getclassname();

	switch(name(nam) )
	{
		default: console.printf("no corespondig monster for replace");break;

		case 'zombieman' :
			e.Replacement = return_random_replacement("private_base");
			e.IsFinal = true;
		break;

		case 'shotgunguy' :
			e.Replacement = return_random_replacement("sergeant_base");
			e.IsFinal = true;
		break;

		case 'chaingunguy' :
			e.Replacement = return_random_replacement("commando_base");
			e.IsFinal = true;
		break;

		case 'doomimp':
			e.Replacement = return_random_replacement("proto_imp_class");
			e.IsFinal = true;
		break;

		case 'demon':
			e.Replacement = return_random_replacement("proto_pinky");
			e.IsFinal = true;
		break;

 		case 'arachnotron' :
			e.Replacement = return_random_replacement("proto_spider");
			e.IsFinal = true;
		break;

		case 'fatso' :
			e.IsFinal = true;
			e.Replacement = return_random_replacement("proto_fat");
		break;
	
		case 'painelemental' :
			e.IsFinal = true;
			e.Replacement = return_random_replacement("proto_pain");
		break;

		case 'cacodemon' :
			e.IsFinal = true;
			e.Replacement = return_random_replacement("proto_head");
		break;

		case 'lostsoul' :
			e.IsFinal = true;
			e.Replacement = return_random_replacement("proto_skull");
		break;

		case 'revenant' :
			e.IsFinal = true;
			e.Replacement = return_random_replacement("proto_rev_class");
		break;

		case 'hellknight' :
			e.IsFinal = true;
			e.Replacement = return_random_replacement("knight_base");
		break;

		case 'baronofhell' :
			e.IsFinal = true;
			e.Replacement = return_random_replacement("baron_base");
		break;

		case 'archvile' :
			e.IsFinal = true;
			e.Replacement = return_random_replacement("proto_arch_vile");
		break;

		case 'Cyberdemon' :
			e.IsFinal = true;
			e.Replacement = return_random_replacement("proto_cyberdemon");
		break;
	
		case 'spidermastermind' :
			e.IsFinal = true;
			e.Replacement = return_random_replacement("proto_spider_mind");
		break;
	}
}

}
