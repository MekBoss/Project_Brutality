//obsolete
class PB_WeaponBase : DoomWeapon 
{
	Actor laseractor;
	Actor InvActor;
	Vector3 invactorpos;
	int integer;

	action void A_DecideSpawnLaserPuff()
	{
			if (CountInv("LaserSightActivated")==1 && CountInv("KeepLaserDeactivated") != 1)
			{
				invoker.A_SpawnLaserPuff();
			}
			else 
			{
				invoker.A_DestroyLaserPuff();
			}
	}
	action void A_DestroyLaserPuff()
	{
		if (invoker.laseractor) invoker.laseractor.Destroy();
	}
	action Actor A_SpawnLaserPuff()
	{
		int integer;
		[invoker.InvActor, invoker.integer] = LineAttack(angle,4096,pitch,0,'None',"InvisiblePuff",LAF_NORANDOMPUFFZ|LAF_NOINTERACT);
		if (invoker.InvActor)
		{
			invoker.invactorpos = invoker.InvActor.pos;
			invoker.InvActor.Destroy();
		}
		if (!invoker.laseractor) invoker.laseractor = Spawn("LaserDotPerma",invoker.invactorpos);
		else invoker.laseractor.SetOrigin(invoker.invactorpos, true);
		
		return invoker.laseractor;
	}
	action state A_DoPBWeaponAction(int weapflags = WRF_ALLOWRELOAD, int pbFlags = 0)
	{
		static const string PBWeapEmptyToken[] = 
		{
			"PBPistolWasEmpty","RifleWasEmpty","UACSMGWasEmpty"
		};
		static const string PBWeapUnloadedToken[] =
		{
			"HasUnloaded","PulseCannonHasUnloaded", "HasUnloadedRG"
		};
		static const string PBWeapUnloadableClasses [] =
		{
			"PB_Weapon","PulseCannon"
		};
		if (CountInv("GoFatality")>=1)
		{
			return ResolveState("Steady");
		}
		else if (CountInv("Grabbing_A_Ledge")>=1) 
		{
			return ResolveState("LedgeClimb");
		}
		else if (CountInv("DoPunch")>=1) 
		{
			return ResolveState("QuickPunch");
		}
		else if (CountInv("Kicking")>=1) 
		{
			return ResolveState("DoKick");
		}
		else if (CountInv("Taunting")>=1) 
		{
			return ResolveState("Taunt");
		}
		else if (CountInv("Salute1")>=1 || CountInv("Salute2")>=1) 
		{
			return ResolveState("Salute");
		}
		else if (CountInv("UseEquipment")>=1) 
		{
			return ResolveState("UseEquipment");
		}
		else if (CountInv("ToggleEquipment")>=1) 
		{
			return ResolveState("SwitchEquipment");
		}
		else if (CountInv("GoWeaponSpecialAbility")>=1)
		{
			if (ResolveState("DualWieldBaby")) return ResolveState("DualWieldBaby");
			else if (ResolveState("NoDualWield")) return ResolveState("NoDualWield");
			else return ResolveState("WeaponSpecial");
		}
		else if (CountInv("GrabbedBarrel")>=1 || CountInv("GrabbedBurningBarrel")>=1) 
		{
			return ResolveState("GrabBarrel");
		}
		else if (CountInv("Unloading")>=1 && ResolveState("Unload"))
		{
			return ResolveState("Unload");
		}
		else 
		{
			for (int untoken = 0; untoken < PBWeapUnloadedToken.Size(); ++untoken)
			{
				if (CountInv(PBWeapUnloadedToken[untoken]) >= 1)
				{
					return ResolveState("GunEmpty");
				}
			}
		}
		if (ResolveState("LoadChamber"))
		{
			for (int i = 0; i < PBWeapEmptyToken.Size(); ++i)
			{
				if (CountInv(PBWeapEmptyToken[i]) >= 1)
				{
					return ResolveState("LoadChamber");
				}
			}
		}
		else if (ResolveState("ReadyToFireSilencer") 
		&& CountInv("SilencerEquipped") >= 1
		&& !(pbFlags & PBWEAP_ISPISTOLSILENCERSTATE))
		{
			return ResolveState("ReadyToFireSilencer");
		}
		A_WeaponReady(weapflags);
		A_WeaponOffset(-CallACS("Script_GetGunOffsetX"), CallACS("Script_GetGunOffsetY"),WOF_INTERPOLATE | (!!(pbFlags & PBWEAP_KEEPYOFFSET) ? WOF_KEEPY : 0));
		return null;
	}
  
	action void A_SetWeaponSprite(String str)
	{
		let psp = player.GetPSprite(PSP_WEAPON);
		psp.sprite = GetSpriteIndex(str);
	}
}

class LaserDeactivated : Inventory {}

enum EPBWeaponFlags
{
	PBWEAP_KEEPYOFFSET = 1<<0,
	PBWEAP_ISRIFLE = 1<<1,
	PBWEAP_CHECKRIFLEEMPTY = 1<<2,
	PBWEAP_ISPISTOLSILENCERSTATE = 1<<3
}
