//All Map
CLASS NewAllmap : Allmap Replaces Allmap { 
Default {
	
	Inventory.PickUpSound "misc/map_PickUp";
	+FLOORCLIP;
	+DONTGIB;
	+COUNTITEM;
}
}

// Invulnerability Sphere ---------------------------------------------------

CLASS InvulnerabilitySphere_  : PowerupGiver Replaces InvulnerabilitySphere { 
Default {
	+COUNTITEM;
	+INVENTORY.AUTOACTIVATE;
	+INVENTORY.ALWAYSPICKUP;
	+INVENTORY.BIGPOWERUP;
	+FloatBob;
	+DONTGIB;
	Inventory.MaxAmount 0;
	Powerup.Type "powerInvulnerable";
	Powerup.Color "White";//InverseMap
	Inventory.PickupMessage "$GOTINVUL";
	Inventory.PickupSound "INVUL";
}
States
{
	Spawn:
		PINV AAABBBCCCDDD 2 Bright A_SpawnItem("Green_FlareMedium",0,35);
		Loop;
	Pickup:
		TNT1 AAAAAAAAAAAAA 0 a_spawnprojectile ("CasingSmoke", 0, 0, random (0, 360), 2, random (0, 360));
		Stop;
}
}

// Soulsphere --------------------------------------------------------------

CLASS LifeSphere : CustomInventory Replaces SoulSphere { 
Default {
	
	+COUNTITEM;
	+INVENTORY.ALWAYSPICKUP;
	+DONTGIB;
	+FloatBob;
	Inventory.PickupMessage "Soulsphere";
	Inventory.PickupSound "SSPH";
}
States
{
	Spawn:
		TNT1 A 0 A_CheckSight("Spawn2");
		SOUL AAABBBCCCDDDCCCBBB 2 Bright A_SpawnItem("Blue_FlareMedium2",0,30);
		Loop;
	Spawn2:
		SOUL ABCDCB 2 BRIGHT;
		Goto Spawn;
	Pickup:
		TNT1 AAAAAAAAAAAAA 0 a_spawnprojectile ("CasingSmoke", 0, 0, random (0, 360), 2, random (0, 360));
		TNT1 A 0 A_GiveInventory("SoulSphereHealth", 1);
		Stop;
}
}

CLASS SoulSphereHealth : Health	 { 
Default {
	
	Inventory.Amount 100;
	Inventory.MaxAmount 200;
	+INVENTORY.ALWAYSPICKUP;
}
}

CLASS EnergySphere : CustomInventory Replaces Megasphere { 
Default {
	
	+COUNTITEM;
	+DONTGIB;
	+FloatBob;
	+INVENTORY.ALWAYSPICKUP;
	Inventory.PickupMessage "Megasphere";
	Inventory.PickupSound "MEGASPH";
}
States
{
	Spawn:
		TNT1 A 0 A_CheckSight("Spawn2");
		MEGA AABBCCDD 2 BRIGHT A_SpawnItem("LensFlare",0,35);
		Loop;
	Spawn2:
		MEGA AABBCCDD 2 BRIGHT;
		Goto Spawn;
	Pickup:
		TNT1 AAAAAAAAAAAAA 0 a_spawnprojectile ("CasingSmoke", 0, 0, random (0, 360), 2, random (0, 360));
		//TNT1 A 0 A_GiveInventory("HeavyArmorForMegaSphere", 1);
		TNT1 AA 0 A_GiveInventory("SoulsphereHealth", 1);
	Stop;
}

}	


CLASS NightVision : Infrared Replaces Infrared { 
Default {
	
	Inventory.PickUpSound "RA1IF1";
	+FLOORCLIP;
	+COUNTITEM;
	+DONTGIB;
	+Inventory.AUTOACTIVATE;
	+INVENTORY.ALWAYSPICKUP;
	Inventory.MaxAmount 0;
	Powerup.Type "powerLightAmp";
	Inventory.PickUpMessage "$GOTVISOR";
}
States
{
	Spawn:
		PVIS AAAAA 2 BRIGHT A_SpawnItem("Red_FlareVerySmall",0,10);
		PVIS B 10;
		Loop;
}
}

CLASS HasInfrared : Inventory { 
Default {
	
	inventory.maxamount 1;
}
}

// Berserk ------------------------------------------------------------------

CLASS MegaBerserk : CustomInventory { 
Default {
	Scale 1.0;
	+COUNTITEM;
	+DONTGIB;
	+FLOORCLIP;
	+INVENTORY.ALWAYSPICKUP;
	Inventory.PickupMessage "MEGA BERSERK!";
	Inventory.PickupSound "BERSPKUP";
}
States
{
	Spawn:
		MSTR A 2;//A_SpawnItem("Red_FlareVerySmall",0,5)
		Loop;
	Pickup:
		TNT1 A 0 A_GiveInventory("PowerStrength");
		TNT1 A 0 HealThing(100, 0);
		TNT1 A 0 A_GiveInventory("SoulSphereHealth", 1);
		TNT1 A 20;
		TNT1 A 0 A_Print ("Press Reload (R) to alternate smash/execution modes");
		Stop;
}
}

CLASS NormalBerserk : CustomInventory { //Replaces Berserk
Default {
	

	Scale 1.0;
	+COUNTITEM;
	+INVENTORY.ALWAYSPICKUP;
	+DONTGIB;
	Inventory.PickupMessage "$GOTBERSERK";
	Inventory.PickupSound "BERSPKUP";
}
States
{
	Spawn:
		PSTR A 2;
		Loop;
	Pickup:
		TNT1 A 0 A_GiveInventory("PowerStrength");
		TNT1 A 0 HealThing(100, 0);
		TNT1 A 20;
		TNT1 A 0 A_Print ("Press Reload (R) to alternate smash/execution modes");
		Stop;
}
}

CLASS DemonStrengthRune : Custominventory {//Berserl1
Default {
	//Scale 0.2
	-COUNTITEM;
	+DONTGIB;
	+INVENTORY.ALWAYSPICKUP;
	Inventory.PickupMessage "You got the Demon Strength Rune. RIP AND TEAR!";
	Inventory.PickupSound "misc/p_pkup";
}
States
{
	Spawn:
		TNT1 A 1 NoDelay A_JumpIf(ACS_NamedExecuteWithResult("CheckTraditional")==1,"ReplaceTraditional");
		TNT1 AA 0;
	Exist:
		DPRF AABBCCCBBA 2 A_SpawnItem("Red_FlareSmall",0,20);
		loop;
		
	ReplaceTraditional:
		TNT1 A 1;
		Stop;
		
	Pickup:
		TNT1 A 0 A_GiveInventory("PowerStrength");
		TNT1 A 0 HealThing(10, 0);
		TNT1 AAAAAAAAAAAAA 0 a_spawnprojectile ("CasingSmoke", 0, 0, random (0, 360), 2, random (0, 360));
		TNT1 A 20;
		TNT1 A 0 A_Print ("You got the Demon Strength Rune. RIP AND TEAR!");
		Stop;
}
}

CLASS RevenantMorph : Inventory { 
Default {
	
	inventory.maxamount 1;
}
}

/*
actor RevenantInfrared : PowerupGiver
{
Powerup.Color BlueMap, 0.23
inventory.maxamount 1
Powerup.Duration -60
powerup.type "LightAmp"
Powerup.Color none, 0.0
+INVENTORY.AUTOACTIVATE
}

ACTOR RevenantInfrared : PowerLightAmp { Powerup.Duration -60}
*/

CLASS DemonMorphEffects : PowerupGiver { 
Default {
	
	-COUNTITEM;
	+NOGRAVITY;
	+INVENTORY.AUTOACTIVATE;
	Inventory.MaxAmount 1;
	Powerup.Type "powerLightAmp";
	Powerup.Color "RedMap";
	Powerup.Duration -75;
	Inventory.PickupMessage "";
	Inventory.PickupSound "";
}
States
{
	Spawn:
		TNT1 A 1 Bright;
		Loop;
}
}

//Changed this into a spawner now, recoded the demon rune
CLASS DemonMorphRune : ACTOR { 
States
{
	Spawn:
		TNT1 A 1;//NoDelay ACS_NamedExecuteAlways("CheckIfSinglePlayerGame", 0)
		//TNT1 A 1 ACS_ExecuteAlways(796, 0, 0, 0, 0);//Check if Vanilla Mode is activated
		//TNT1 A 2 A_JumpIf(ACS_NamedExecuteWithResult("CheckTraditional")==1,"ReplaceTraditional");
		TNT1 A 0 A_Jump(256, "BaronRune", "RevenantRune");
	ReplaceTraditional:
	ReplaceVanilla:
	MultiplayerSpawn:
	DoNothing:
	Pickup:
		TNT1 A 1;
		Stop;
		
	BaronRune:
		//TNT1 A 1 A_SpawnItem("DemonRuneBaron");
	Stop;
		
	RevenantRune:
		//TNT1 A 1 A_SpawnItem("DemonRuneRevenant");
	Stop;
}

}